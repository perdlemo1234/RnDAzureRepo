{
	"name": "employee_conditionalsplit",
	"properties": {
		"folder": {
			"name": "Basic Transformations"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "input_employees",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "popstateoutput",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "popstateoutput",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "popstateoutput",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "popstateoutput",
						"type": "DatasetReference"
					},
					"name": "sink4"
				},
				{
					"dataset": {
						"referenceName": "popstateoutput",
						"type": "DatasetReference"
					},
					"name": "sink5"
				},
				{
					"dataset": {
						"referenceName": "popstateoutput",
						"type": "DatasetReference"
					},
					"name": "sink6"
				}
			],
			"transformations": [
				{
					"name": "Splitbasedondeptid"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EMPLOYEE_ID as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          EMAIL as string,",
				"          PHONE_NUMBER as string,",
				"          HIRE_DATE as string,",
				"          JOB_ID as string,",
				"          SALARY as string,",
				"          COMMISSION_PCT as string,",
				"          MANAGER_ID as string,",
				"          DEPARTMENT_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 split(equals(DEPARTMENT_ID,'60'),",
				"     equals(DEPARTMENT_ID,'100'),",
				"     equals(DEPARTMENT_ID,'40'),",
				"     equals(DEPARTMENT_ID,'50'),",
				"     equals(DEPARTMENT_ID,'30'),",
				"     disjoint: false) ~> Splitbasedondeptid@(ID60, ID100, ID90, ID50, ID30, OtherIDs)",
				"Splitbasedondeptid@ID100 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Year as string,",
				"          MoviesCount as string",
				"     ),",
				"     partitionFileNames:['ID100.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"Splitbasedondeptid@ID90 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Year as string,",
				"          MoviesCount as string",
				"     ),",
				"     partitionFileNames:['ID90.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2",
				"Splitbasedondeptid@ID50 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Year as string,",
				"          MoviesCount as string",
				"     ),",
				"     partitionFileNames:['ID50.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink3",
				"Splitbasedondeptid@ID30 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Year as string,",
				"          MoviesCount as string",
				"     ),",
				"     partitionFileNames:['ID30.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink4",
				"Splitbasedondeptid@ID60 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Year as string,",
				"          MoviesCount as string",
				"     ),",
				"     partitionFileNames:['ID60.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink5",
				"Splitbasedondeptid@OtherIDs sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Year as string,",
				"          MoviesCount as string",
				"     ),",
				"     partitionFileNames:['OtherID.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink6"
			]
		}
	}
}