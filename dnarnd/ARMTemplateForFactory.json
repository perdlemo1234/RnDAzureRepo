{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dnarnd"
		},
		"AzureBlobStoragegithub_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStoragegithub'"
		},
		"transformedblob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'transformedblob'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/IMP_WINDOW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "window_transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "window_transformation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employees": {},
									"ascendingsalary": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/window_transformation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/concat_column')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "concatenate_column_transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "concatenate_column_transformation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employees": {},
									"FullName": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/concatenate_column_transformation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/conditional_split')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "employee_conditionalsplit",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "employee_conditionalsplit",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {},
									"sink3": {},
									"sink4": {},
									"sink5": {},
									"sink6": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/employee_conditionalsplit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/derived_col')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "employee_derived_col",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "employee_derived_col",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/employee_derived_col')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/join_and_select')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "population_joincolumn",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "population_joincolumn",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"popstate": {},
									"popmsia": {},
									"simplejoinrnd": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "movies_select",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "movies_select",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"movie": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/population_joincolumn')]",
				"[concat(variables('factoryId'), '/dataflows/movies_select')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GDP_lookuptransformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "GDP_lookuptransformation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"population": {},
									"GDP": {},
									"combined": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/GDP_lookuptransformation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pivot_and_unpivot')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pivot_transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "pivot_transformation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"input": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Unpivot_Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Unpivot_Transformation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"boughtfood": {},
									"unpivotsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/pivot_transformation')]",
				"[concat(variables('factoryId'), '/dataflows/Unpivot_Transformation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transformation_aggregate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "moviedataflow_aggregate",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "moviedataflow_aggregate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"movies": {},
									"MovieClean": {},
									"moviesbyyearsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/moviedataflow_aggregate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transformation_filter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "popstate_filter",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "popstate_filter",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"populationstateoutput": {},
									"populationsinkstate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/popstate_filter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/union_transformation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "employee_union_transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "employee_union_transformation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"IT30": {},
									"IT50": {},
									"IT60": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/employee_union_transformation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GDP_AnnualTransformation')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "transformedblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "gdp_gni_annual_real.csv",
						"folderPath": "Input Folder ",
						"container": "de-rnd"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "series",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "gdp",
						"type": "String"
					},
					{
						"name": "gni",
						"type": "String"
					},
					{
						"name": "gdp_capita",
						"type": "String"
					},
					{
						"name": "gni_capita",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/transformedblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IT30')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "transformedblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ID30.csv",
						"container": "de-rnd-output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/transformedblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IT50')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "transformedblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ID50.csv",
						"container": "de-rnd-output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/transformedblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IT60')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "transformedblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ID60.csv",
						"container": "de-rnd-output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/transformedblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/input_employees')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "transformedblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employees.csv",
						"folderPath": "Input Folder ",
						"container": "de-rnd"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/transformedblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/input_food')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "transformedblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "food.csv",
						"folderPath": "Input Folder ",
						"container": "de-rnd"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID ",
						"type": "String"
					},
					{
						"name": "Restaurant_Name",
						"type": "String"
					},
					{
						"name": "Chicken ",
						"type": "String"
					},
					{
						"name": "Beef",
						"type": "String"
					},
					{
						"name": "Lettuce",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/transformedblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/joincolumnoutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "transformedblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "de-rnd-output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "MoviesCount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/transformedblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviescsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "transformedblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "movies.csv",
						"folderPath": "Input Folder ",
						"container": "de-rnd"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movieId",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/transformedblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviescsvoutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "transformedblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "de-rnd-output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/transformedblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/popstateoutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "transformedblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@convertTimeZone(utcnow(),'UTC','Singapore Standard Time')",
							"type": "Expression"
						},
						"container": "de-rnd-output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "MoviesCount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/transformedblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/population_state')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "transformedblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "population_state.csv",
						"folderPath": "Input Folder ",
						"container": "de-rnd"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "state",
						"type": "String"
					},
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "sex",
						"type": "String"
					},
					{
						"name": "age",
						"type": "String"
					},
					{
						"name": "ethnicity",
						"type": "String"
					},
					{
						"name": "population",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/transformedblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/populaton_malaysia')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "transformedblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "population_malaysia.csv",
						"folderPath": "Input Folder ",
						"container": "de-rnd"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "date",
						"type": "String"
					},
					{
						"name": "sex",
						"type": "String"
					},
					{
						"name": "age",
						"type": "String"
					},
					{
						"name": "ethnicity",
						"type": "String"
					},
					{
						"name": "population",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/transformedblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/select_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "transformedblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "de-rnd-output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "MoviesCount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/transformedblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStoragegithub')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStoragegithub_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/transformedblob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('transformedblob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GDP_lookuptransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "populaton_malaysia",
								"type": "DatasetReference"
							},
							"name": "population"
						},
						{
							"dataset": {
								"referenceName": "GDP_AnnualTransformation",
								"type": "DatasetReference"
							},
							"name": "GDP"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "popstateoutput",
								"type": "DatasetReference"
							},
							"name": "combined"
						}
					],
					"transformations": [
						{
							"name": "lookup1",
							"description": "Match the date from the population dataset and GDP dataset ( starting from 1970 ) "
						}
					],
					"scriptLines": [
						"source(output(",
						"          date as string,",
						"          sex as string,",
						"          age as string,",
						"          ethnicity as string,",
						"          population as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> population",
						"source(output(",
						"          series as string,",
						"          date as string,",
						"          gdp as string,",
						"          gni as string,",
						"          gdp_capita as string,",
						"          gni_capita as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> GDP",
						"population, GDP lookup(population@date == GDP@date,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Year as string,",
						"          MoviesCount as string",
						"     ),",
						"     partitionFileNames:['pop_and_gdp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> combined"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/populaton_malaysia')]",
				"[concat(variables('factoryId'), '/datasets/GDP_AnnualTransformation')]",
				"[concat(variables('factoryId'), '/datasets/popstateoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Unpivot_Transformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "input_food",
								"type": "DatasetReference"
							},
							"name": "boughtfood"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "popstateoutput",
								"type": "DatasetReference"
							},
							"name": "unpivotsink"
						}
					],
					"transformations": [
						{
							"name": "unpivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {ID } as string,",
						"          Restaurant_Name as string,",
						"          {Chicken } as string,",
						"          Beef as string,",
						"          Lettuce as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> boughtfood",
						"boughtfood unpivot(output(",
						"          {Fresh Produce} as string,",
						"          {Amount } as string",
						"     ),",
						"     ungroupBy({ID },",
						"          Restaurant_Name),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivot1",
						"unpivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Year as string,",
						"          MoviesCount as string",
						"     ),",
						"     partitionFileNames:['food_unpivot'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> unpivotsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/input_food')]",
				"[concat(variables('factoryId'), '/datasets/popstateoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/concatenate_column_transformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "input_employees",
								"type": "DatasetReference"
							},
							"name": "employees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "popstateoutput",
								"type": "DatasetReference"
							},
							"name": "FullName"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employees",
						"employees derive(FullName = concat(FIRST_NAME,LAST_NAME)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Year as string,",
						"          MoviesCount as string",
						"     ),",
						"     partitionFileNames:['concatenate_column_output'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> FullName"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/input_employees')]",
				"[concat(variables('factoryId'), '/datasets/popstateoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employee_conditionalsplit')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "input_employees",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "popstateoutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "popstateoutput",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "popstateoutput",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "popstateoutput",
								"type": "DatasetReference"
							},
							"name": "sink4"
						},
						{
							"dataset": {
								"referenceName": "popstateoutput",
								"type": "DatasetReference"
							},
							"name": "sink5"
						},
						{
							"dataset": {
								"referenceName": "popstateoutput",
								"type": "DatasetReference"
							},
							"name": "sink6"
						}
					],
					"transformations": [
						{
							"name": "Splitbasedondeptid"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 split(equals(DEPARTMENT_ID,'60'),",
						"     equals(DEPARTMENT_ID,'100'),",
						"     equals(DEPARTMENT_ID,'40'),",
						"     equals(DEPARTMENT_ID,'50'),",
						"     equals(DEPARTMENT_ID,'30'),",
						"     disjoint: false) ~> Splitbasedondeptid@(ID60, ID100, ID90, ID50, ID30, OtherIDs)",
						"Splitbasedondeptid@ID100 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Year as string,",
						"          MoviesCount as string",
						"     ),",
						"     partitionFileNames:['ID100.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"Splitbasedondeptid@ID90 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Year as string,",
						"          MoviesCount as string",
						"     ),",
						"     partitionFileNames:['ID90.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2",
						"Splitbasedondeptid@ID50 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Year as string,",
						"          MoviesCount as string",
						"     ),",
						"     partitionFileNames:['ID50.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink3",
						"Splitbasedondeptid@ID30 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Year as string,",
						"          MoviesCount as string",
						"     ),",
						"     partitionFileNames:['ID30.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink4",
						"Splitbasedondeptid@ID60 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Year as string,",
						"          MoviesCount as string",
						"     ),",
						"     partitionFileNames:['ID60.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink5",
						"Splitbasedondeptid@OtherIDs sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Year as string,",
						"          MoviesCount as string",
						"     ),",
						"     partitionFileNames:['OtherID.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink6"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/input_employees')]",
				"[concat(variables('factoryId'), '/datasets/popstateoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employee_derived_col')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "input_employees",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "popstateoutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"cast1 derive(FIRST_NAME = upper(FIRST_NAME),",
						"          LAST_NAME = upper(LAST_NAME),",
						"          {High Salary } = iif(SALARY>10000, 'Yes', 'No')) ~> derivedColumn1",
						"employee cast(output(",
						"          SALARY as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Year as string,",
						"          MoviesCount as string",
						"     ),",
						"     partitionFileNames:['derived_col_output'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/input_employees')]",
				"[concat(variables('factoryId'), '/datasets/popstateoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employee_union_transformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "IT30",
								"type": "DatasetReference"
							},
							"name": "IT30"
						},
						{
							"dataset": {
								"referenceName": "IT50",
								"type": "DatasetReference"
							},
							"name": "IT50"
						},
						{
							"dataset": {
								"referenceName": "IT60",
								"type": "DatasetReference"
							},
							"name": "IT60"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "popstateoutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> IT30",
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> IT50",
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> IT60",
						"IT30, IT50, IT60 union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Year as string,",
						"          MoviesCount as string",
						"     ),",
						"     partitionFileNames:['employee_union_output'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/IT30')]",
				"[concat(variables('factoryId'), '/datasets/IT50')]",
				"[concat(variables('factoryId'), '/datasets/IT60')]",
				"[concat(variables('factoryId'), '/datasets/popstateoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviedataflow_aggregate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "moviescsv",
								"type": "DatasetReference"
							},
							"name": "movies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "moviescsvoutput",
								"type": "DatasetReference"
							},
							"name": "MovieClean"
						},
						{
							"dataset": {
								"referenceName": "moviescsvoutput",
								"type": "DatasetReference"
							},
							"name": "moviesbyyearsink"
						}
					],
					"transformations": [
						{
							"name": "YearExtraction"
						},
						{
							"name": "moviesbyyear"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movieId as string,",
						"          title as string,",
						"          genres as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> movies",
						"movies derive(Year = toInteger(trim(right(title,6),'()')),",
						"          title = toString(left(title, length(title)-6)),",
						"     partitionBy('hash', 1)) ~> YearExtraction",
						"YearExtraction aggregate(groupBy(Year),",
						"     MoviesCount = count(),",
						"     partitionBy('hash', 1)) ~> moviesbyyear",
						"YearExtraction sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['moviesoutputaggregate.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> MovieClean",
						"moviesbyyear sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['moviesbyyearaggregate.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> moviesbyyearsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/moviescsv')]",
				"[concat(variables('factoryId'), '/datasets/moviescsvoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies_select')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "moviescsv",
								"type": "DatasetReference"
							},
							"name": "movie"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "select_output",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movieId as string,",
						"          title as string,",
						"          genres as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> movie",
						"movie select(mapColumn(",
						"          {Movie-ID} = movieId,",
						"          {Title } = title,",
						"          Genres = genres",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Year as string,",
						"          MoviesCount as string",
						"     ),",
						"     partitionFileNames:['movie_output '],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/moviescsv')]",
				"[concat(variables('factoryId'), '/datasets/select_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pivot_transformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "input_employees",
								"type": "DatasetReference"
							},
							"name": "input"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "popstateoutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "pivot"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> input",
						"input pivot(groupBy(DEPARTMENT_ID),",
						"     pivotBy(JOB_ID),",
						"     total_ = count(EMPLOYEE_ID),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot",
						"pivot sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Year as string,",
						"          MoviesCount as string",
						"     ),",
						"     partitionFileNames:['employee_pivot_output'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/input_employees')]",
				"[concat(variables('factoryId'), '/datasets/popstateoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/popstate_filter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "population_state",
								"type": "DatasetReference"
							},
							"name": "populationstateoutput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "popstateoutput",
								"type": "DatasetReference"
							},
							"name": "populationsinkstate"
						}
					],
					"transformations": [
						{
							"name": "populationmorethan1000"
						},
						{
							"name": "changedatatype"
						}
					],
					"scriptLines": [
						"source(output(",
						"          state as string,",
						"          date as string,",
						"          sex as string,",
						"          age as string,",
						"          ethnicity as string,",
						"          population as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> populationstateoutput",
						"changedatatype filter(greaterOrEqual(population, 1000),",
						"     partitionBy('hash', 1)) ~> populationmorethan1000",
						"populationstateoutput cast(output(",
						"          population as integer '000'",
						"     ),",
						"     errors: true) ~> changedatatype",
						"populationmorethan1000 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Year as string,",
						"          MoviesCount as string",
						"     ),",
						"     partitionFileNames:['pop_filter_output '],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> populationsinkstate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/population_state')]",
				"[concat(variables('factoryId'), '/datasets/popstateoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/population_joincolumn')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "population_state",
								"type": "DatasetReference"
							},
							"name": "popstate"
						},
						{
							"dataset": {
								"referenceName": "populaton_malaysia",
								"type": "DatasetReference"
							},
							"name": "popmsia"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "joincolumnoutput",
								"type": "DatasetReference"
							},
							"name": "simplejoinrnd"
						}
					],
					"transformations": [
						{
							"name": "jointest"
						}
					],
					"scriptLines": [
						"source(output(",
						"          state as string,",
						"          date as string,",
						"          sex as string,",
						"          age as string,",
						"          ethnicity as string,",
						"          population as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> popstate",
						"source(output(",
						"          date as string,",
						"          sex as string,",
						"          age as string,",
						"          ethnicity as string,",
						"          population as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> popmsia",
						"popstate, popmsia join(popstate@population == popmsia@population",
						"     && popstate@ethnicity == popmsia@ethnicity,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> jointest",
						"jointest sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Year as string,",
						"          MoviesCount as string",
						"     ),",
						"     partitionFileNames:['filter_output '],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> simplejoinrnd"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/population_state')]",
				"[concat(variables('factoryId'), '/datasets/populaton_malaysia')]",
				"[concat(variables('factoryId'), '/datasets/joincolumnoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/window_transformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "input_employees",
								"type": "DatasetReference"
							},
							"name": "employees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "popstateoutput",
								"type": "DatasetReference"
							},
							"name": "ascendingsalary",
							"description": "obtains average salary. Output depends on whether we have sort enabled.  "
						}
					],
					"transformations": [
						{
							"name": "window1"
						},
						{
							"name": "filter1",
							"description": "Selects all row rank 1s in the Dataset "
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as integer,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as integer,",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employees",
						"employees window(over(DEPARTMENT_ID),",
						"     asc(SALARY, true),",
						"     {Average Salary } = avg(SALARY),",
						"          {Rank Salary } = rank()) ~> window1",
						"window1 filter(equals({Rank Salary }, 1)) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Year as string,",
						"          MoviesCount as string",
						"     ),",
						"     partitionFileNames:['Output_window'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ascendingsalary"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/input_employees')]",
				"[concat(variables('factoryId'), '/datasets/popstateoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/window_transformation1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "window1"
						},
						{
							"name": "filter1",
							"description": "Selects all row rank 1s in the Dataset "
						},
						{
							"name": "rank1"
						},
						{
							"name": "employees"
						},
						{
							"name": "ascendingsalary"
						}
					],
					"scriptLines": [
						"input(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as integer,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as integer,",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     order: 0,",
						"     allowSchemaDrift: true) ~> employees",
						"rank1 window(over(DEPARTMENT_ID),",
						"     asc(SALARY, true),",
						"     {Average Salary } = avg(SALARY),",
						"          {Rank Salary } = rank()) ~> window1",
						"window1 filter(equals({Rank Salary }, 1)) ~> filter1",
						"employees rank(asc(SALARY, true),",
						"     output(TEST as long)) ~> rank1",
						"filter1 output() ~> ascendingsalary"
					]
				}
			},
			"dependsOn": []
		}
	]
}